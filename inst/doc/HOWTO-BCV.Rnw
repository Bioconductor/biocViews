
%\VignetteIndexEntry{biocViews-HOWTO}

%
% NOTE -- ONLY EDIT THE .Rnw FILE!!!  The .tex file is
% likely to be overwritten.
%
\documentclass[12pt]{article}

\usepackage{amsmath,pstricks}
\usepackage[authoryear,round]{natbib}
\usepackage{hyperref}


\textwidth=6.2in
\textheight=8.5in
%\parskip=.3cm
\oddsidemargin=.1in
\evensidemargin=.1in
\headheight=-.3in

\newcommand{\scscst}{\scriptscriptstyle}
\newcommand{\scst}{\scriptstyle}


\newcommand{\Rfunction}[1]{{\texttt{#1}}}
\newcommand{\Robject}[1]{{\texttt{#1}}}
\newcommand{\Rpackage}[1]{{\textit{#1}}}
\newcommand{\Rmethod}[1]{{\texttt{#1}}}
\newcommand{\Rfunarg}[1]{{\texttt{#1}}}
\newcommand{\Rclass}[1]{{\textit{#1}}}

\textwidth=6.2in

\bibliographystyle{plainnat} 
 
\begin{document}
%\setkeys{Gin}{width=0.55\textwidth}

\title{HOWTO generate biocViews HTML}
\author{VJC}
\maketitle


<<echo=FALSE,results=hide>>=
library(biocViews)
library(Biobase)
@

\section{Overview}

The purpose of \Rpackage{biocViews} is to support the semi-automated
creation of task view HTML pages based on a Bioconductor repository.
The fundamental resource is the VIEWS file at a repository.  This file
contains the complete DESCRIPTION file contents for each package along
with additional meta data describing the location of package artifacts
(archive files for different platforms and vignettes).

The standard behavior of the view generation program is to query the
repository over the internet.  This package includes a static sample
VIEWS file so that the examples in this document can run without
internet access.


\section{Establishing a view vocabulary}

Currently we use \texttt{dot} to state the vocabulary.
<<lkd>>=
cat(readLines(system.file("dot/biocViewsVocab.dot", package="biocViews")),sep="\n")
@
This is transformed to a GXL document using graphviz' \texttt{dot2gxl}, and
from GXL to an R graph::graphNEL using \Rfunction{fromGXL}.

One thing that is currently lacking from the definition of the views
vocabulary is a notion of order.  Since the purpose of the vocabulary
is primarily for display, ordering a given view's subviews is an
important feature.

\section{Querying a repository}

To generate a list of \Rclass{BiocViews} objects that can be used to
generate HTML views, you will need the repository URL, a graph
representation of the vocabulary, and the string that represents the
vocabular root node.

<<getViews>>=
data(biocViewsVocab)
reposPath <- system.file("doc", package="biocViews")
reposUrl <- paste("file://", reposPath, sep="")
biocViews <- getBiocViews(reposUrl, biocViewsVocab, "vocRoot")

print(biocViews[1:2])

@ 

\section{Generating HTML without ctv}

By default, the set of HTML views will link to package description
pages located in the html subdirectory of the remote repository.

<<html1, eval=FALSE>>=
viewsDir <- file.path(tempdir(), "biocViews")
dir.create(viewsDir)
writeBiocViews(biocViews, dir=viewsDir)

dir(viewsDir)
@ 



\section{Getting a view-package list structure}

The \Rfunction{permulist} function transforms the package-view
association into a list with elements corresponding to all
views in the vocabulary.
<<lkpl, eval=FALSE>>=
data(biocViewsVocab)
pp <- permulist(gg, biocViewsVocab, "vocRoot")
pp[1:4]
@

\section{Generating HTML}

Once the view-package association has been created, we can generate
view-specific HTML.  First we create ctv objects, by writing
XML documents and reading them back in.  This is annoying but
seems simpler than creating the ctv objects directly.  This
is accomplished with a single call.

<<lkh, eval=FALSE>>=
cc <- getCTVlist(pp, biocViewsVocab)
@
We apply \texttt{bcv2html} to all the components of \texttt{cc}:
<<app, eval=FALSE>>=
jnk <- lapply(cc, bcv2html, reposname="Bioconductor", 
packageURL="http://www.bioconductor.org/packages/bioc/1.7/src/contrib/html/")
dir(patt="htm")
@
Finally, we need to create an index.html.  This mentions the top
level vocabulary terms:
<<dotop, eval=FALSE>>=
tmp <- tempfile()
els <- topwrap(biocViewsVocab)
toptop <- readLines(system.file("htmlfrags/topfrag.html", package="biocViews"))
cat(toptop,els,"</ul>\n", file=tmp)
readLines(tmp)
system(paste("cp ", tmp, " index.html "))
<<eval=FALSE>>=
unlink(tmp)
@

Final products are like

%\includegraphics{topoct}

%\includegraphics{prepro}

Still need a back button.  My browser comes with one.


\end{document}

